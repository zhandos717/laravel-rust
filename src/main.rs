//! # Laravel Rust Bridge
//!
//! –≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç –º–æ—Å—Ç –º–µ–∂–¥—É Laravel (PHP) –∏ Rust, –ø–æ–∑–≤–æ–ª—è—è
//! –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å HTTP-–∑–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ Rust-—Å–µ—Ä–≤–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç
//! —Å PHP-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º Laravel —á–µ—Ä–µ–∑ Unix-—Å–æ–∫–µ—Ç.

use anyhow::Result;
use std::path::Path;
use std::process::Command;
use std::sync::atomic::{AtomicBool, Ordering};
use std::sync::Arc;
use std::thread;
use std::time::Duration;

mod bridge;
mod server;
mod errors;
mod config;
use server::HttpServer;
use config::AppConfig;

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
const DEFAULT_SOCKET_PATH: &str = "/tmp/rust_php_bridge.sock";
const SOCKET_WAIT_MAX_ATTEMPTS: usize = 20;
const SOCKET_WAIT_INTERVAL_MS: u64 = 500;
const SHUTDOWN_CHECK_INTERVAL_MS: u64 = 100;

#[tokio::main]
async fn main() -> Result<()> {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    init_logging()?;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    let running = Arc::new(AtomicBool::new(true));
    let r = running.clone();

    ctrlc::set_handler(move || {
        r.store(false, Ordering::SeqCst);
        println!("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã...");
    })
    .expect("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤");

    println!("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Laravel Rust Bridge...");

    // –ó–∞–ø—É—Å–∫–∞–µ–º PHP worker –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
    let php_process_result = start_php_worker();
    match &php_process_result {
        Ok(_) => println!("‚úÖ PHP worker –∑–∞–ø—É—â–µ–Ω"),
        Err(e) => eprintln!("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ PHP worker: {}", e),
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    let config = match AppConfig::from_env() {
        Ok(config) => {
            if let Err(validation_err) = config.validate() {
                eprintln!("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {}", validation_err);
                return Err(validation_err);
            }
            config
        }
        Err(e) => {
            eprintln!("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {}", e);
            return Err(e);
        }
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–∫–µ—Ç —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
    let _ = wait_for_php_worker(&config.connection.socket_path);

    // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Rust HTTP —Å–µ—Ä–≤–µ—Ä
    let socket_bridge = match crate::bridge::socket_bridge::SocketBridge::new_with_config(&config) {
        Ok(bridge) => bridge,
        Err(e) => {
            eprintln!("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SocketBridge: {}", e);
            return Err(e.into());
        }
    };
    println!("‚úÖ Rust HTTP —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");

    let server = match HttpServer::new_with_config(socket_bridge.clone(), &config).await {
        Ok(server) => server,
        Err(e) => {
            eprintln!("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ HTTP —Å–µ—Ä–≤–µ—Ä–∞: {}", e);
            return Err(e.into());
        }
    };
    println!("‚úÖ Rust HTTP —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");

    // –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
    let server_handle = tokio::spawn(async move {
        if let Err(e) = server.start().await {
            eprintln!("–û—à–∏–±–∫–∞ –≤ HTTP —Å–µ—Ä–≤–µ—Ä–µ: {}", e);
            std::process::exit(1);
        }
    });

    // –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    while running.load(Ordering::SeqCst) {
        thread::sleep(config.connection.shutdown_check_interval);
    }

    // –ó–∞–≤–µ—Ä—à–∞–µ–º PHP –ø—Ä–æ—Ü–µ—Å—Å
    if let Ok(mut proc) = php_process_result {
        println!("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PHP worker...");
        let _ = proc.kill();
        let _ = proc.wait();
    }

    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    println!("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Rust HTTP —Å–µ—Ä–≤–µ—Ä...");

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
    let _ = server_handle.await;

    // –û—á–∏—â–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ SocketBridge
    socket_bridge.cleanup().await;

    Ok(())
}

/// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
///
/// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
/// –ø–æ —É—Ä–æ–≤–Ω—è–º –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, —É–∫–∞–∑–∞–Ω–Ω—É—é –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
///
/// # Returns
///
/// * `Ok(())` - –µ—Å–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
/// * `Err` - –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
fn init_logging() -> Result<()> {
    use std::fs;
    use tracing_subscriber::fmt;
    use tracing_subscriber::EnvFilter;
    use tracing_subscriber::prelude::__tracing_subscriber_SubscriberExt;
    use tracing_subscriber::Layer;
    use tracing_subscriber::util::SubscriberInitExt;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    dotenvy::dotenv().ok();

    // –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    let log_level = std::env::var("LOG_LEVEL").unwrap_or_else(|_| "info".to_string());

    // –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    let log_dir = std::env::var("LOG_DIR").unwrap_or_else(|_| "./logs".to_string());

    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    fs::create_dir_all(&log_dir)?;

    // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –ª–æ–≥–æ–≤
    let log_file = std::fs::OpenOptions::new()
        .create(true)
        .write(true)
        .append(true)
        .open(Path::new(&log_dir).join("server.log"))?;

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–≤–Ω—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    let env_filter = EnvFilter::try_from_default_env()
        .unwrap_or(EnvFilter::new(&format!("laravel-rust-server={},hyper=info", log_level)));

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª
    let file_layer = fmt::layer()
        .with_writer(log_file)
        .with_ansi(false) // –û—Ç–∫–ª—é—á–∞–µ–º —Ü–≤–µ—Ç–∞ –≤ —Ñ–∞–π–ª–µ
        .with_target(true)
        .with_line_number(true)
        .with_filter(env_filter.clone()); // –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ—è—Ö

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
    let stdout_layer = fmt::layer()
        .with_writer(std::io::stderr)
        .with_ansi(true)
        .with_target(true)
        .with_line_number(true)
        .with_filter(env_filter); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π subscriber —Å –æ–±–µ–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏
    tracing_subscriber::registry()
        .with(file_layer)
        .with(stdout_layer)
        .init();

    Ok(())
}

/// –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PHP worker
///
/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ Unix-—Å–æ–∫–µ—Ç–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–µ–º—É
/// –≤ —Ç–µ—á–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
///
/// # Arguments
///
/// * `socket_path` - –ø—É—Ç—å –∫ Unix-—Å–æ–∫–µ—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç PHP worker
///
/// # Returns
///
/// * `Ok())` - –µ—Å–ª–∏ —Å–æ–∫–µ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
/// * `Err` - –µ—Å–ª–∏ —Å–æ–∫–µ—Ç –Ω–µ –≥–æ—Ç–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
fn wait_for_php_worker(socket_path: &str) -> Result<()> {
    let mut attempts = 0;
    
    // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let max_attempts = std::env::var("SOCKET_WAIT_MAX_ATTEMPTS")
        .unwrap_or_else(|_| "10".to_string())  // Reduced from 20 to 10
        .parse()
        .unwrap_or(10);
    let interval = std::env::var("SOCKET_WAIT_INTERVAL_MS")
        .unwrap_or_else(|_| "250".to_string())  // Reduced from 50 to 250ms
        .parse()
        .unwrap_or(250);

    println!("‚è≥ –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PHP worker –∏ —Å–æ–∫–µ—Ç–∞...");
    while attempts < max_attempts {
        if std::path::Path::new(socket_path).exists() {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–æ–∫–µ—Ç—É
            match std::os::unix::net::UnixStream::connect(socket_path) {
                Ok(_) => {
                    println!("‚úÖ –°–æ–∫–µ—Ç PHP worker –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é");
                    return Ok(());
                }
                Err(_) => {
                    // –°–æ–∫–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é, –∂–¥–µ–º
                    thread::sleep(Duration::from_millis(interval));
                    attempts += 1;
                }
            }
        } else {
            thread::sleep(Duration::from_millis(interval));
            attempts += 1;
        }
    }

    eprintln!("‚ö†Ô∏è PHP worker –Ω–µ –≥–æ—Ç–æ–≤ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –≤ —Ç–µ—á–µ–Ω–∏–µ {} —Å–µ–∫—É–Ω–¥", (max_attempts * interval) / 1000);
    Err(anyhow::anyhow!("PHP worker –Ω–µ –≥–æ—Ç–æ–≤ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é"))
}

/// –ó–∞–ø—É—Å–∫ PHP worker –ø—Ä–æ—Ü–µ—Å—Å–∞
///
/// –ó–∞–ø—É—Å–∫–∞–µ—Ç PHP –ø—Ä–æ—Ü–µ—Å—Å —Å Laravel artisan –∫–æ–º–∞–Ω–¥–æ–π, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç
/// —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ Rust.
///
/// # Returns
///
/// * `Ok(Child)` - –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ PHP worker
/// * `Err` - –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
fn start_php_worker() -> Result<std::process::Child> {
    // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ PHP –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
    let php_path = std::env::var("PHP_PATH").unwrap_or_else(|_| "php".to_string());

    // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ Laravel –ø—Ä–æ–µ–∫—Ç—É
    let laravel_path = std::env::var("LARAVEL_PATH").unwrap_or_else(|_| {
        // –ï—Å–ª–∏ LARAVEL_PATH –Ω–µ –∑–∞–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –æ—Ç —Ç–µ–∫—É—â–µ–π (rust-runtime)
        let current_dir = std::env::current_dir().unwrap_or_else(|_| std::path::PathBuf::from("."));
        current_dir
            .parent()
            .unwrap_or(&current_dir)
            .to_string_lossy()
            .to_string()
    });

    let artisan_path = std::path::Path::new(&laravel_path).join("artisan");

    if !artisan_path.exists() {
        return Err(anyhow::anyhow!("–§–∞–π–ª artisan –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {:?}", artisan_path));
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—É—Å–∫–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    let startup_command = std::env::var("STARTUP_COMMAND").unwrap_or_else(|_| "laravel-rust:serve".to_string());

    // –ó–∞–ø—É—Å–∫–∞–µ–º PHP artisan —Å –∫–æ–º–∞–Ω–¥–æ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    let mut cmd = Command::new(&php_path);
    cmd.arg(&artisan_path).arg(&startup_command).current_dir(&laravel_path); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –∫–æ—Ä–µ–Ω—å Laravel –ø—Ä–æ–µ–∫—Ç–∞

    let child = cmd
        .spawn()
        .map_err(|e| anyhow::anyhow!("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ PHP worker: {}", e))?;

    Ok(child)
}
