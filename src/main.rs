#![warn(unused_imports)]
#![warn(unused_variables)]
#![warn(unused_mut)]
#![allow(dead_code)]
#![allow(unused_variables)]
#![allow(unused_imports)]

use std::process::Command;
use std::sync::atomic::{AtomicBool, Ordering};
use std::sync::Arc;
use std::thread;
use std::time::Duration;
use std::os::unix::net::UnixStream;

mod bridge;
mod server;
use server::HttpServer;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    let running = Arc::new(AtomicBool::new(true));
    let r = running.clone();

    ctrlc::set_handler(move || {
        r.store(false, Ordering::SeqCst);
        println!("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã...");
    })
    .expect("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤");

    println!("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Laravel Rust Bridge...");

    // –ó–∞–ø—É—Å–∫–∞–µ–º PHP worker –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
    let php_process_result = start_php_worker();
    match &php_process_result {
        Ok(_) => println!("‚úÖ PHP worker –∑–∞–ø—É—â–µ–Ω"),
        Err(e) => eprintln!("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ PHP worker: {}", e),
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–∫–µ—Ç —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
    let socket_path = std::env::var("SOCKET_PATH").unwrap_or_else(|_| "/tmp/rust_php_bridge.sock".to_string());
    let mut attempts = 0;
    let max_attempts = 20; // 10 seconds max wait
    
    println!("‚è≥ –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PHP worker –∏ —Å–æ–∫–µ—Ç–∞...");
    while attempts < max_attempts {
        if std::path::Path::new(&socket_path).exists() {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–æ–∫–µ—Ç—É
            match std::os::unix::net::UnixStream::connect(&socket_path) {
                Ok(_) => {
                    println!("‚úÖ –°–æ–∫–µ—Ç PHP worker –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é");
                    break;
                }
                Err(_) => {
                    // –°–æ–∫–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é, –∂–¥–µ–º
                    thread::sleep(Duration::from_millis(500));
                    attempts += 1;
                }
            }
        } else {
            thread::sleep(Duration::from_millis(500));
            attempts += 1;
        }
    }
    
    if attempts >= max_attempts {
        eprintln!("‚ö†Ô∏è PHP worker –Ω–µ –≥–æ—Ç–æ–≤ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥");
    }

    // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Rust HTTP —Å–µ—Ä–≤–µ—Ä
    let socket_bridge = match crate::bridge::socket_bridge::SocketBridge::new() {
        Ok(bridge) => bridge,
        Err(e) => {
            eprintln!("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SocketBridge: {}", e);
            return Err(e.into());
        }
    };

    let server = match HttpServer::new(socket_bridge.clone()).await {
        Ok(server) => server,
        Err(e) => {
            eprintln!("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ HTTP —Å–µ—Ä–≤–µ—Ä–∞: {}", e);
            return Err(e.into());
        }
    };
    println!("‚úÖ Rust HTTP —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");

    // –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
    let server_handle = tokio::spawn(async move {
        if let Err(e) = server.start().await {
            eprintln!("–û—à–∏–±–∫–∞ –≤ HTTP —Å–µ—Ä–≤–µ—Ä–µ: {}", e);
            std::process::exit(1);
        }
    });

    // –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    while running.load(Ordering::SeqCst) {
        thread::sleep(Duration::from_millis(100));
    }

    // –ó–∞–≤–µ—Ä—à–∞–µ–º PHP –ø—Ä–æ—Ü–µ—Å—Å
    if let Ok(mut proc) = php_process_result {
        println!("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PHP worker...");
        let _ = proc.kill();
        let _ = proc.wait();
    }

    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    println!("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Rust HTTP —Å–µ—Ä–≤–µ—Ä...");

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
    let _ = server_handle.await;

    // –û—á–∏—â–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ SocketBridge
    socket_bridge.cleanup().await;

    Ok(())
}

fn start_php_worker() -> Result<std::process::Child, Box<dyn std::error::Error + Send + Sync + 'static>> {
    // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ PHP –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
    let php_path = std::env::var("PHP_PATH").unwrap_or_else(|_| "php".to_string());
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ Laravel –ø—Ä–æ–µ–∫—Ç—É
    let laravel_path = std::env::var("LARAVEL_PATH").unwrap_or_else(|_| {
        // –ï—Å–ª–∏ LARAVEL_PATH –Ω–µ –∑–∞–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –æ—Ç —Ç–µ–∫—É—â–µ–π (rust-runtime)
        let current_dir = std::env::current_dir().unwrap_or_else(|_| std::path::PathBuf::from("."));
        current_dir.parent().unwrap_or(&current_dir).to_string_lossy().to_string()
    });
    
    let artisan_path = std::path::Path::new(&laravel_path).join("artisan");

    if !artisan_path.exists() {
        return Err(format!("–§–∞–π–ª artisan –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {:?}", artisan_path).into());
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º PHP artisan worker:serve
    let mut cmd = Command::new(&php_path);
    cmd.arg(&artisan_path).arg("worker:serve").current_dir(&laravel_path); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –∫–æ—Ä–µ–Ω—å Laravel –ø—Ä–æ–µ–∫—Ç–∞

    let child = cmd
        .spawn()
        .map_err(|e| format!("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ PHP worker: {}", e))?;

    Ok(child)
}
